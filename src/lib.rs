/* xmlparser - An xml parser meant to be used extensibly in shell scripts
 * Copyright (C) 2021 Saleh Bakra'a
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

// Since libxml2 does not follow rust's coding conventions
#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]

// The bindings generated by bindgen contain references to types without stable ABIs
#![allow(improper_ctypes)]

include!(concat!(env!("OUT_DIR"), "/bindings.rs"));

use std::ffi::CString;
use std::ptr::{ null, null_mut };

use cty::*;

struct ParserData {
    result: u32,
    state: ParserState,
    path: String,
}

impl ParserData {
    fn new() -> ParserData {
        ParserData {
            result: 0,
            state: ParserState::INITIAL,
            path: String::new()
        }
    }
}

enum ParserState {
    INITIAL,
    START,
}

pub fn print_nodes(file: &String) {
    let file = CString::new(file.clone()).unwrap();

    let mut handler = default_sax_handler();
    init_sax_handler(&mut handler);

    let mut data = ParserData::new();
    let data_ptr = &mut data as *mut _ as *mut c_void;
    unsafe { xmlSAXUserParseFile(&mut handler, data_ptr, file.into_raw()); }
}

fn default_sax_handler() -> xmlSAXHandler {
    xmlSAXHandler {
        internalSubset: None,
        isStandalone: None,
        hasInternalSubset: None,
        hasExternalSubset: None,
        resolveEntity: None,
        getEntity: None,
        entityDecl: None,
        notationDecl: None,
        attributeDecl: None,
        elementDecl: None,
        unparsedEntityDecl: None,
        setDocumentLocator: None,
        startDocument: None,
        endDocument: None,
        startElement: None,
        endElement: None,
        reference: None,
        characters: None,
        ignorableWhitespace: None,
        processingInstruction: None,
        comment: None,
        warning: None,
        error: None,
        fatalError: None,
        getParameterEntity: None,
        cdataBlock: None,
        externalSubset: None,
        initialized: 0,
        _private: null_mut::<c_void>(),
        startElementNs: None,
        endElementNs: None,
        serror: None,
    }
}

fn init_sax_handler(sax: xmlSAXHandlerPtr) {
    unsafe {
        (*sax).startDocument = Some(sax_start_document);
        (*sax).startElement = Some(sax_start_element);
        (*sax).endElement = Some(sax_end_element);
        (*sax).initialized = 1;
    }
}

extern fn sax_start_document(user_data_ptr: *mut c_void) {
    println!("Started parsing :]");

    if user_data_ptr.is_null() {
        return;
    }

    let mut user_data = deref_mut_void_ptr::<ParserData>(user_data_ptr);
    (*user_data).state = ParserState::START;
}

fn deref_mut_void_ptr<'a, T>(ptr: *mut c_void) -> &'a mut T {
    let ptr = ptr as *mut T;
    unsafe { &mut *ptr }
}

extern fn sax_start_element(user_data_ptr: *mut c_void, name: *const xmlChar, attrs: *mut *const xmlChar) {
    let mut user_data = deref_mut_void_ptr::<ParserData>(user_data_ptr);

    let name = string_from_xmlchar_with_null(name);
    (*user_data).path = format!("{}/{}", (*user_data).path, name);

    let attrs = vec_from_ptr_with_null(attrs);
    if attrs.is_empty() {
        println!("{}", (*user_data).path);
        return;
    }

    let attrs: Vec<String> = attrs.iter().map(|e| string_from_xmlchar_with_null(*e)).collect();
    let attrs: Vec<String> = attrs.chunks(2).map(|c| format!("{}=\"{}\"", c[0], c[1])).collect();
    let attrs = attrs.join(",");

    println!("{}@[{}]", (*user_data).path, attrs);
}

extern fn sax_end_element(user_data_ptr: *mut c_void, name: *const xmlChar) {
    let mut user_data = deref_mut_void_ptr::<ParserData>(user_data_ptr);
    let name = string_from_xmlchar_with_null(name);
    (*user_data).path = (*user_data).path.strip_suffix(&format!("/{}", name))
                                         .unwrap_or(&(*user_data).path).to_string();
}

fn string_from_xmlchar_with_null(chars: *const xmlChar) -> String {
    let mut container = Vec::new();
    if chars.is_null() {
        return String::from_utf8(container).unwrap();
    }

    unsafe {
        let mut i = 0;
        while *(chars.offset(i)) != b'\0' {
            container.push(*(chars.offset(i)));
            i += 1;
        }
    }

    String::from_utf8(container).unwrap()
}

fn vec_from_ptr_with_null(ptr: *mut *const xmlChar) -> Vec<*const xmlChar> {
    let mut container = Vec::new();
    if ptr.is_null() {
        return container;
    }

    unsafe {
        let mut i = 0;
        while !(*ptr.add(i)).is_null() {
            container.push(*ptr.add(i));
            i += 1;
        }
        container
    }
}
